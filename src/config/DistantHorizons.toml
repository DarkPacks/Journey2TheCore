_Versions = "1.6.2a"
# Show the lod button in the options screen next to fov
optionsButton = true

[client]

	[client.graphics]

		[client.graphics.quality]
			# What is the maximum detail fake chunks should be drawn at? 
			# This setting will only affect closer chunks.
			# Higher settings will increase memory and GPU usage. 
			#
			# CHUNK: render 1 LOD for each Chunk. 
			# HALF_CHUNK: render 4 LODs for each Chunk. 
			# FOUR_BLOCKS: render 16 LODs for each Chunk. 
			# TWO_BLOCKS: render 64 LODs for each Chunk. 
			# BLOCK: render 256 LODs for each Chunk (width of one block). 
			#
			# Lowest Quality: CHUNK Highest Quality: BLOCK
			drawResolution = "BLOCK"
			# The radius of the mod's render distance. (measured in chunks) 
			#
			lodChunkRenderDistance = 16
			# This indicates how detailed fake chunks will represent 
			# overhangs, caves, floating islands, ect. 
			# Higher options will make the world more accurate, but will increase memory and GPU usage. 
			#
			# LOW: uses at max 2 columns per position. 
			# MEDIUM: uses at max 4 columns per position. 
			# HIGH: uses at max 8 columns per position. 
			#
			# Lowest Quality: LOW Highest Quality: HIGH
			verticalQuality = "LOW"
			# This indicates how quickly fake chunks decrease in quality the further away they are. 
			# Higher settings will render higher quality fake chunks farther away, 
			# but will increase memory and GPU usage.
			horizontalScale = 8
			# This indicates how quickly fake chunks decrease in quality the further away they are. 
			# Higher settings will render higher quality fake chunks farther away, 
			# but will increase memory and GPU usage.
			horizontalQuality = "LOWEST"
			# This determines how lod level drop off will be done. 
			#
			# SMOOTH_DROPOFF: 
			#     The lod level is calculated for each point, making the drop off a smooth circle. 
			# PERFORMANCE_FOCUSED: 
			#     One detail level for an entire region. Minimize CPU usage and 
			#     improve terrain refresh delay, especially for high Lod render distance. 
			# AUTO: 
			#     Use SMOOTH_DROPOFF for less then 128 Lod render distance, 
			#     or PERFORMANCE_FOCUSED otherwise. 
			#
			dropoffQuality = "AUTO"

		[client.graphics.fogQuality]
			# At what distance should Fog be drawn on the fake chunks? 
			#
			# This setting shouldn't affect performance.
			fogDistance = "FAR"
			# When should fog be drawn? 
			#
			# USE_OPTIFINE_SETTING: Use whatever Fog setting Optifine is using.
			# If Optifine isn't installed this defaults to FOG_ENABLED. 
			# FOG_ENABLED: Never draw fog on the LODs 
			# FOG_DISABLED: Always draw fast fog on the LODs 
			#
			# Disabling fog will improve GPU performance.
			fogDrawMode = "FOG_ENABLED"
			# What color should fog use? 
			#
			# USE_WORLD_FOG_COLOR: Use the world's fog color. 
			# USE_SKY_COLOR: Use the sky's color. 
			#
			# This setting doesn't affect performance.
			fogColorMode = "USE_SKY_COLOR"
			# If true disable Minecraft's fog. 
			#
			# Experimental! Mod support is not guarantee.
			disableVanillaFog = true

		[client.graphics.advancedGraphics]
			# If false fake chunks behind the player's camera 
			# aren't drawn, increasing GPU performance. 
			#
			# If true all LODs are drawn, even those behind 
			# the player's camera, decreasing GPU performance. 
			#
			# Disable this if you see LODs disappearing at the corners of your vision. 
			#
			disableDirectionalCulling = false
			# How often should LODs be drawn on top of regular chunks? 
			# HALF and ALWAYS will prevent holes in the world, 
			# but may look odd for transparent blocks or in caves. 
			#
			# NEVER: 
			#     LODs won't render on top of vanilla chunks. 
			# BORDER: 
			#     LODs will render only on the border of vanilla chunks, preventing some holes in the world. 
			# DYNAMIC: 
			#     LODs will render on top of distant vanilla chunks to hide delayed loading. 
			#     More effective on higher render distances. 
			#     For vanilla render distances less than or equal to 4 
			#     NEVER or ALWAYS will be used depending on the dimension. 
			# ALWAYS: 
			#     LODs will render on all vanilla chunks preventing all holes in the world. 
			#
			# This setting shouldn't affect performance. 
			#
			vanillaOverdraw = "DYNAMIC"
			# Will prevent some overdraw issues, but may cause nearby fake chunks to render incorrectly 
			# especially when in/near an ocean. 
			#
			# This setting shouldn't affect performance. 
			#
			useExtendedNearClipPlane = true

	[client.worldGenerator]
		# Whether to enable Distant chunks generator? 
		#
		# Turning this on allows Distant Horizons to make lods for chunks 
		# that are outside of vanilla view distance. 
		#
		# Note that in server, distant generation is always off. 
		#
		enableDistantGeneration = true
		distanceGenerationMode = "FEATURES"
		# How should block and sky lights be processed for distant generation? 
		#
		# Note that this include already existing chunks since vanilla 
		# does not store sky light values to save file. 
		#
		# FAST: Use height map to fake the light values. 
		# FANCY: Use actaul light engines to generate proper values. 
		#
		# This will effect generation speed, but not the rendering performance.
		lightGenerationMode = "FANCY"
		# In what priority should fake chunks be generated outside the vanilla render distance? 
		#
		# FAR_FIRST 
		# Fake chunks are generated from lowest to highest detail 
		# with a priority for far away regions. 
		# This fills in the world fastest, but you will have large low detail 
		# blocks for a while while the generation happens. 
		#
		# NEAR_FIRST 
		# Fake chunks are generated around the player 
		# in a spiral, similar to vanilla minecraft. 
		# Best used when on a server since we can't generate 
		# fake chunks. 
		#
		# BALANCED 
		# A mix between NEAR_FIRSTandFAR_FIRST. 
		# First prioritise completing nearby highest detail chunks, 
		# then focus on filling in the low detail areas away from the player. 
		#
		# AUTO 
		# Uses BALANCED when on a single player world 
		# and NEAR_FIRST when connected to a server. 
		#
		# This shouldn't affect performance.
		generationPriority = "NEAR_FIRST"
		# When generating fake chunks, what blocks should be ignored? 
		# Ignored blocks don't affect the height of the fake chunk, but might affect the color. 
		# So using BOTH will prevent snow covered blocks from appearing one block too tall, 
		# but will still show the snow's color.
		#
		# NONE: Use all blocks when generating fake chunks 
		# NON_FULL: Only use full blocks when generating fake chunks (ignores slabs, lanterns, torches, tall grass, etc.) 
		# NO_COLLISION: Only use solid blocks when generating fake chunks (ignores tall grass, torches, etc.) 
		# BOTH: Only use full solid blocks when generating fake chunks 
		#
		# This wont't affect performance.
		blocksToAvoid = "BOTH"

	[client.advanced]

		[client.advanced.threading]
			# How many threads should be used when generating fake chunks outside 
			# the normal render distance? 
			#
			# If you experience stuttering when generating distant LODs, decrease 
			# this number. If you want to increase LOD generation speed, 
			# increase this number. 
			#
			# This and the number of buffer builder threads are independent, 
			# so if they add up to more threads than your CPU has cores, 
			# that shouldn't cause an issue. 
			#
			# The maximum value is the number of logical processors on your CPU. 
			# Requires a restart to take effect. 
			#
			numberOfWorldGenerationThreads = 4
			# How many threads are used when building vertex buffers? 
			# (The things sent to your GPU to draw the fake chunks). 
			#
			# If you experience high CPU usage when NOT generating distant 
			# fake chunks, lower this number. A higher number will make fake
			# fake chunks' transition faster when moving around the world. 
			#
			# This and the number of world generator threads are independent, 
			# so if they add up to more threads than your CPU has cores, 
			# that shouldn't cause an issue. 
			#
			# The maximum value is the number of logical processors on your CPU. 
			# Requires a restart to take effect. 
			#
			numberOfBufferBuilderThreads = 2

		[client.advanced.debugging]
			# If true, the mod is enabled and fake chunks will be drawn. 
			# If false, the mod will still generate fake chunks, 
			# but they won't be rendered. 
			#
			# Disabling rendering will reduce GPU usage 
			#
			drawLods = true
			# Should specialized colors/rendering modes be used? 
			#
			# OFF: Fake chunks will be drawn with their normal colors. 
			# SHOW_WIREFRAME: Fake chunks will be drawn as wireframes. 
			# SHOW_DETAIL: Fake chunks color will be based on their detail level. 
			# SHOW_DETAIL_WIREFRAME: Fake chunks color will be based on their detail level, drawn as a wireframe. 
			# SHOW_GENMODE: Fake chunks color will be based on their distant generation mode. 
			# SHOW_GENMODE_WIREFRAME: Fake chunks color will be based on their distant generation mode, drawn as a wireframe. 
			#
			debugMode = "OFF"
			# If true the F8 key can be used to cycle through the different debug modes. 
			# and the F6 key can be used to enable and disable LOD rendering.
			enableDebugKeybindings = false

		[client.advanced.buffers]
			# What method should be used to upload geometry to the GPU? 
			#
			# AUTO: Picks the best option based on the GPU you have. 
			# BUFFER_STORAGE: Default for NVIDIA if OpenGL 4.5 is supported. 
			#                 Fast rendering, no stuttering. 
			# SUB_DATA: Backup option for NVIDIA. 
			#           Fast rendering but may stutter when uploading. 
			# BUFFER_MAPPING: Slow rendering but won't stutter when uploading. Possibly the best option for integrated GPUs. 
			#                Default option for AMD/Intel. 
			#                May end up storing buffers in System memory. 
			#                Fast rendering if in GPU memory, slow if in system memory, 
			#                but won't stutter when uploading.  
			# DATA: Fast rendering but will stutter when uploading. 
			#       Backup option for AMD/Intel. 
			#       Fast rendering but may stutter when uploading. 
			#
			# If you don't see any difference when changing these settings, or the world looks corrupted: 
			# Restart the game to clear the old buffers. 
			#
			gpuUploadMethod = "AUTO"
			# How long should a buffer wait per Megabyte of data uploaded?
			# Helpful resource for frame times: https://fpstoms.com 
			#
			# Longer times may reduce stuttering but will make fake chunks 
			# transition and load slower. Change this to [0] for no timeout.
			#
			# NOTE:
			# Before changing this config, try changing "GPU Upload methods"
			#  and determined the best method for your hardware first. 
			#
			gpuUploadPerMegabyteInMilliseconds = 0
			# How frequently should vertex buffers (geometry) be rebuilt and sent to the GPU? 
			# Higher settings may cause stuttering, but will prevent holes in the world 
			#
			rebuildTimes = "NORMAL"

